/*! \file orbitaldensityrand.h
	\brief OrbitalDensityRand??????

	Copyright © 2019 @dc1394 All Rights Reserved.
	This software is released under the BSD 2-Clause License.
*/

#ifndef _ORBITALDENSITYRAND_H_
#define _ORBITALDENSITYRAND_H_

#pragma once

#include "DXUT.h"
#include "getdata/getdata.h"
#include "utility/property.h"
#include <atomic>               // for std::atomic
#include <memory>               // for std::shared_ptr, for std::unique_ptr
#include <thread>               // for std::thread
#include <vector>               // for std::vector

namespace orbitaldensityrand {
    //! A struct.
    /*!
        ?????
    */
    struct SimpleVertex
    {
        DirectX::XMFLOAT3 Pos;
        DirectX::XMFLOAT4 Color;
    };

	//! A class.
	/*!
		???????????????
	*/
	class OrbitalDensityRand final {
    public:
		// #region ???

		//! A enumerated type
		/*!
			????????????
		*/
		enum class Re_Im_type {
			// ??
			REAL,
			// ??
			IMAGINARY
		};

		// #endregion ???

		// #region ??????????????

		//! A constructor.
		/*!
			??????????
            \param pgd r?????????
		*/
		explicit OrbitalDensityRand(std::shared_ptr<getdata::GetData> const & pgd);

		//! A default destructor.
		/*!
		    ???????????
		*/
		~OrbitalDensityRand() = default;

		// #endregion ??????????????

		// #region ?????

		//! A public member function.
		/*!
            ?????
            \param m ?????
            \param reim ?????????????????
            \return ????????????
		*/
        void operator()(std::int32_t m, OrbitalDensityRand::Re_Im_type reim);

	private:
		//! A private member function.
		/*!
            SimpleVertex????????????????????
            \param m ?????
            \param reim ?????????????????
		*/
		void ClearFillSimpleVertex(std::int32_t m, OrbitalDensityRand::Re_Im_type reim);

		//! A private member function.
		/*!
            SimpleVertex????????
            \param m ?????
            \param reim ?????????????????
            \param ver ???SimpleVertex
		*/
		void FillSimpleVertex(std::int32_t m, OrbitalDensityRand::Re_Im_type reim, SimpleVertex & ver) const;

		// #endregion ?????

		// #region ?????

	public:
		//! A property.
		/*!
			?????????????????????????
		*/
		utility::Property<bool> const Complete;

		//! A property.
		/*!
			????????????????????
		*/
		utility::Property<std::shared_ptr<std::thread> const &> const Pth;

		//! A property.
		/*!
			????????????????
		*/
		utility::Property<bool> Redraw;

        //! A property.
        /*!
            ????r???????????
        */
        utility::Property<double> Rmax;
        
		//! A property.
		/*!
			??????????????????????
		*/
		utility::Property<bool> Thread_end;

        //! A property.
        /*!
            ?????????
        */
        utility::Property<std::vector<SimpleVertex> const &> Vertices;
        
		//! A property.
		/*!
			??????????
		*/
		utility::Property<std::vector<SimpleVertex>::size_type> Verticessize;

		// #endregion ?????

		// #region ?????

	public:
		//! A public static member variable (constant).
		/*!
			??????
		*/
		static std::vector<SimpleVertex>::size_type const VERTICESSIZE_INIT_VALUE = 100000;

	private:
		//! A private member variable.
		/*!
			??????????????????
		*/
		std::atomic<bool> complete_ = false;

        //! A private member variable.
        /*!
            r?????????
        */
        std::shared_ptr<getdata::GetData> pgd_;

		//! A private member variable.
		/*!
			??????????????
		*/
		std::shared_ptr<std::thread> pth_;

		//! A private member variable.
		/*!
			?????????
		*/
		bool redraw_ = true;

		//! A private member variable.
		/*!
			????r????
		*/
		double rmax_;

		//! A private member variable.
		/*!
			???????????????
		*/
		std::atomic<bool> thread_end_ = false;

		//! A private member variable.
		/*!
			??????????????????
		*/
		std::atomic<std::vector<SimpleVertex>::size_type> verticessize_ = VERTICESSIZE_INIT_VALUE;

		//! A private member variable.
		/*!
			vertex buffer
		*/
		std::vector<SimpleVertex> vertices_;

	public:
		// #region ??????????????????

		//! A private constructor (deleted).
		/*!
			????????????(??)
		*/
		OrbitalDensityRand() = delete;

		//! A private copy constructor (deleted).
		/*!
			??????????(??)
            \param dummy ???????????(???)
		*/
		OrbitalDensityRand(OrbitalDensityRand const & dummy) = delete;

		//! A private member function (deleted).
		/*!
			operator=()???(??)
			\param dummy ???????????(???)
			\return ???????????
		*/
		OrbitalDensityRand & operator=(OrbitalDensityRand const & dummy) = delete;

		// #endregion ??????????????????
	};

	//! A function.
	/*!
		???????????rmax????
		\param pgd ?????????
		\return rmax??
	*/
	double GetRmax(std::shared_ptr<getdata::GetData> const & pgd);
}

#endif  // _ORBITALDENSITYRAND_H_
